@{
    ViewData["Title"] = "Расписание";
}

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <title>Расписание</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- FullCalendar CSS -->
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <!-- FullCalendar JS -->
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/locales/ru.js"></script>

    <style>
        body {
            padding: 20px;
            padding-top: 50px;
        }

        #calendar {
            max-width: 1100px;
            margin: 0 auto;
        }
       
    </style>
</head>
<body>
    <div class="d-flex align-items-center mb-4">
        <a asp-controller="Admin" asp-action="Index" class="me-3 text-decoration-none text-dark">
            <i class="bi bi-arrow-left fs-3"></i>
        </a>
        <h2 class="mb-0">Расписание занятий</h2>
    </div>


    <div id="calendar"></div>

    <!-- Модальное окно для создания/редактирования события -->
    <div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="eventModalLabel">Занятие</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                </div>
                <div class="modal-body">
                    <form id="eventForm">
                        <div class="mb-3">
                            <label for="eventTeacherId" class="form-label">Преподаватель</label>
                            <select class="form-select" id="eventTeacherId" required>
                                <option value="">Выберите преподавателя</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="eventGroupId" class="form-label">Группа</label>
                            <select class="form-select" id="eventGroupId" required>
                                <option value="">Сначала выберите преподавателя</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="eventStartTime" class="form-label">Время начала</label>
                            <input type="time" class="form-control" id="eventStartTime" step="900" required>
                        </div>
                        <input type="hidden" id="eventStartDate">
                    </form>
                </div>
                <div class="modal-footer">
                    <div id="modalError" class="alert alert-danger d-none w-100 text-center" role="alert"></div>
                    <button type="button" class="btn btn-danger me-auto d-none" id="deleteEventBtn">Удалить</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button type="button" class="btn btn-primary" id="saveEventBtn">Сохранить</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let teacherGroupsMap = {};

        function loadTeachersWithGroups() {
            $.get('/CalendarLesson/GetAll', function (data) {
                const teacherSelect = $('#eventTeacherId');
                teacherSelect.empty();
                teacherSelect.append('<option value="">Выберите преподавателя</option>');

                data.forEach(t => {
                    teacherSelect.append(`<option value="${t.id}">${t.name}</option>`);
                    teacherGroupsMap[t.id] = t.groups;
                });
            });
        }

        $('#eventTeacherId').on('change', function () {
            const teacherId = $(this).val();
            const groupSelect = $('#eventGroupId');
            groupSelect.empty();

            if (teacherId && teacherGroupsMap[teacherId]) {
                const groups = teacherGroupsMap[teacherId];
                groupSelect.append('<option value="">Выберите группу</option>');
                groups.forEach(g => {
                    groupSelect.append(`<option value="${g.id}">${g.name}</option>`);
                });
                $(document).trigger('group-options-loaded');
            } else {
                groupSelect.append('<option value="">Сначала выберите преподавателя</option>');
            }
        });

        function showModalError(message) {
            $('#modalError').removeClass('d-none').text(message);
        }

        function hideModalError() {
            $('#modalError').addClass('d-none').text('');
        }

        function formatDateLocal(date) {
            const pad = (n) => n.toString().padStart(2, '0');
            const yyyy = date.getFullYear();
            const mm = pad(date.getMonth() + 1);
            const dd = pad(date.getDate());
            const hh = pad(date.getHours());
            const min = pad(date.getMinutes());
            const ss = pad(date.getSeconds());
            return `${yyyy}-${mm}-${dd}T${hh}:${min}:${ss}`;
        }

        document.addEventListener('DOMContentLoaded', function () {
            const calendarEl = document.getElementById('calendar');

            const calendar = new FullCalendar.Calendar(calendarEl, {
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'timeGridWeek'
                },
                initialView: 'timeGridWeek',
                locale: 'ru',
                slotMinTime: "08:00:00",
                slotMaxTime: "22:00:00",
                height: "auto",
                displayEventTime: false,
                selectable: true,

                select: function (info) {
                    const start = new Date(info.start);
                    const pad = (n) => n.toString().padStart(2, '0');
                    $('#eventStartDate').val(start.toISOString().split('T')[0]);
                    $('#eventStartTime').val(`${pad(start.getHours())}:${pad(start.getMinutes())}`);
                    $('#eventTeacherId').val('');
                    $('#eventGroupId').empty().append('<option value="">Сначала выберите преподавателя</option>');
                    $('#saveEventBtn').removeData('event-id');
                    $('#deleteEventBtn').addClass('d-none');
                    hideModalError();
                    $('#eventModal').modal('show');
                },

                eventClick: function (info) {
                    const event = info.event;
                    const start = new Date(event.start);
                    const pad = (n) => n.toString().padStart(2, '0');
                    const dateStr = start.toISOString().split('T')[0];
                    const timeStr = `${pad(start.getHours())}:${pad(start.getMinutes())}`;

                    $('#eventStartDate').val(dateStr);
                    $('#eventStartTime').val(timeStr);

                    $('#eventTeacherId').val(event.extendedProps.teacherId).trigger('change');

                    // $(document).one('group-options-loaded', function () {
                    //     $('#eventGroupId').val(event.extendedProps.teacherId);
                    // });

                    $('#eventModal').modal('show');
                    $('#saveEventBtn').data('event-id', event.id);
                    $('#deleteEventBtn').data('event-id', event.id).removeClass('d-none');
                    hideModalError();
                },

                events: function (fetchInfo, successCallback, failureCallback) {
                    $.ajax({
                        url: '/CalendarLesson/GetEvents',
                        type: 'GET',
                        data: {
                            start: fetchInfo.startStr,
                            end: fetchInfo.endStr
                        },
                        success: function (data) {
                            successCallback(data);
                        },
                        error: function () {
                            failureCallback();
                        }
                    });
                }
            });

            calendar.render();
            loadTeachersWithGroups();

            $('#saveEventBtn').on('click', function () {
                const groupId = parseInt($('#eventGroupId').val());
                const teacherId = parseInt($('#eventTeacherId').val());
                const date = $('#eventStartDate').val();
                const startTime = $('#eventStartTime').val();
                const existingId = $(this).data('event-id');

                if (!groupId || !teacherId || !startTime) {
                    showModalError("Пожалуйста, заполните все поля.");
                    return;
                }

                const start = new Date(`${date}T${startTime}`);
                const end = new Date(start.getTime() + 45 * 60000);

                const payload = {
                    id: existingId || 0,
                    title: '',
                    groupId: groupId,
                    teacherId: teacherId,
                    start: formatDateLocal(start),
                    end: formatDateLocal(end)
                };

                const method = existingId ? 'PUT' : 'POST';
                const url = existingId ? '/CalendarLesson/Update' : '/CalendarLesson/Create';

                $.ajax({
                    url: url,
                    type: method,
                    contentType: 'application/json',
                    data: JSON.stringify(payload),
                    success: function () {
                        $('#eventModal').modal('hide');
                        calendar.refetchEvents();
                    },
                    error: function (xhr) {
                        let message = "Ошибка при создании занятия";
                        if (xhr.status === 400) {
                            message = xhr.responseText || "Некорректные данные";
                        }
                        showModalError(message);
                    }
                });
            });

            $('#deleteEventBtn').on('click', function () {
                const id = $(this).data('event-id');
                if (confirm("Удалить занятие?")) {
                    $.ajax({
                        url: `/CalendarLesson/Delete/${id}`,
                        type: 'DELETE',
                        success: function () {
                            $('#eventModal').modal('hide');
                            calendar.refetchEvents();
                        },
                        error: function () {
                            showModalError("Не удалось удалить занятие.");
                        }
                    });
                }
            });
        });
    </script>

</body>
</html>
