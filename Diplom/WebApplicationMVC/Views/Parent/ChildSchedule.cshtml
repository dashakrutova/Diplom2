@model WebApplicationMVC.ViewModels.Parents.CalendarViewModel

<head>
    <link rel="stylesheet" href="~/css/childSchedule.css" asp-append-version="true" />
</head>

@{
    var today = DateTime.Today;
    string monthNameRaw = System.Globalization.CultureInfo.GetCultureInfo("ru-RU").DateTimeFormat.GetMonthName(Model.Month);
    string monthName = char.ToUpper(monthNameRaw[0]) + monthNameRaw.Substring(1);
}

<div class="month-navigation">
    <a href="@Url.Action("ChildSchedule", new { year = Model.Month == 1 ? Model.Year - 1 : Model.Year, month = Model.Month == 1 ? 12 : Model.Month - 1 })">« Предыдущий месяц</a>
    <h2>@monthName @Model.Year</h2>
    <a href="@Url.Action("ChildSchedule", new { year = Model.Month == 12 ? Model.Year + 1 : Model.Year, month = Model.Month == 12 ? 1 : Model.Month + 1 })">Следующий месяц »</a>
</div>


<div class="calendar-content">
    <div class="form-calendar">
    <table class="calendar">
        <thead>
            <tr>
                <th>Пн</th>
                <th>Вт</th>
                <th>Ср</th>
                <th>Чт</th>
                <th>Пт</th>
                <th>Сб</th>
                <th>Вс</th>
            </tr>
        </thead>
        <tbody>
            @{
                var firstDay = new DateTime(Model.Year, Model.Month, 1);
                var daysInMonth = DateTime.DaysInMonth(Model.Year, Model.Month);
                var startDayOfWeek = (int)firstDay.DayOfWeek;
                if (startDayOfWeek == 0) startDayOfWeek = 7;
            }
            <tr>
                @for (int i = 1; i < startDayOfWeek; i++)
                {
                    <td></td>
                }
                @for (int day = 1; day <= daysInMonth; day++)
                {
                    var date = new DateTime(Model.Year, Model.Month, day);
                    var lesson = Model.Lessons.FirstOrDefault(l => l.Date.Date == date);
                    var isLessonDay = lesson != null;
                    var isAlertDay = Model.AlertDates.Contains(date);

                    <td class="calendar-day" data-date="@date.ToString("yyyy-MM-dd")">
                        @if (isLessonDay)
                        {
                            <div class="lesson-day">@day</div>
                        }
                        else
                        {
                            @day
                        }
                        @if (date == today)
                        {
                            <div class="today"></div>
                        }
                        @if (isAlertDay)
                        {
                            <div class="alert-sign">!</div>
                        }
                    </td>

                    if ((startDayOfWeek + day - 1) % 7 == 0)
                    {
                        @:</tr><tr>
                    }
                }
            </tr>
        </tbody>
    </table>
    </div>

    <div id="lessonDetails" class="lesson-details" style="margin-top: 20px; display:none;">
        <h3>Информация о занятии</h3>
        <p><strong>Дата:</strong> <span id="lessonDate"></span></p>
        <p><strong>Время:</strong> <span id="lessonTime"></span></p>
        <p><strong>Предмет:</strong> <span id="lessonCourseName"></span></p>
        <p><strong>Преподаватель:</strong> <span id="lessonTeacher"></span></p>
    </div>
</div>

<div class="child-info" style="margin-bottom: 10px; font-size:20px; margin-top: 10px;">
    <p>@Model.ChildFullName</p>
    <p>Курс: @Model.CourseName</p>
</div>
<div class="parent-balance" style="margin:10px 0; font-weight:bold; font-size:25px;">
    Баланс ребёнка: @Model.Balance.ToString("N2") ₽
</div>

<script>
    const lessons = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Lessons));

    document.querySelectorAll('.calendar-day').forEach(cell => {
        cell.addEventListener('click', () => {
            const date = cell.getAttribute('data-date');
            const lesson = lessons.find(l => l.Date.startsWith(date));

            if (lesson) {
                // Разделяем дату и время
                const [lessonDate, lessonTime] = lesson.Date.split('T');

                document.getElementById('lessonDetails').style.display = 'block';
                // document.getElementById('lessonDate').innerText = lesson.Date.split('T')[0];
                document.getElementById('lessonDate').innerText = lessonDate;
                document.getElementById('lessonTime').innerText = lessonTime.substring(0, 5); // Часы и минуты
                document.getElementById('lessonCourseName').innerText = lesson.CourseName;
                document.getElementById('lessonTeacher').innerText = lesson.Teacher;
                document.getElementById('lessonNotes').innerText = lesson.Notes;
            } else {
                document.getElementById('lessonDetails').style.display = 'none';
            }
        });
    });
</script>




@* 
<h2>Календарь - @Model.Year / @Model.Month</h2>

<form method="get" action="@Url.Action("ChildSchedule", "Parent")" class="month-selector">
    <label for="month">Месяц:</label>
    <select name="month" id="month">
        @for (int m = 1; m <= 12; m++)
        {
            <option value="@m" selected="@(m == Model.Month ? "selected" : null)">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
        }
    </select>

    <label for="year">Год:</label>
    <input type="number" name="year" id="year" value="@Model.Year" min="2000" max="2100" />

    <button type="submit">Показать</button>
</form>

<div style="display: flex;">
    <table class="calendar">
        <thead>
            <tr>
                <th>Пн</th>
                <th>Вт</th>
                <th>Ср</th>
                <th>Чт</th>
                <th>Пт</th>
                <th>Сб</th>
                <th>Вс</th>
            </tr>
        </thead>
        <tbody>
            @{
                var firstDay = new DateTime(Model.Year, Model.Month, 1);
                var daysInMonth = DateTime.DaysInMonth(Model.Year, Model.Month);
                var startDayOfWeek = (int)firstDay.DayOfWeek;
                if (startDayOfWeek == 0) startDayOfWeek = 7;
            }
            <tr>
                @for (int i = 1; i < startDayOfWeek; i++)
                {
                    <td></td>
                }
                @for (int day = 1; day <= daysInMonth; day++)
                {
                    var date = new DateTime(Model.Year, Model.Month, day);
                    var lesson = Model.Lessons.FirstOrDefault(l => l.Date == date);
                    var isLessonDay = lesson != null;
                    var isAlertDay = Model.AlertDates.Contains(date);

                    <td class="calendar-day" data-date="@date.ToString("yyyy-MM-dd")">
                        @if (isLessonDay)
                        {
                            <div class="lesson-day">@day</div>
                        }
                        else
                        {
                            @day
                        }
                        @if (isAlertDay)
                        {
                            <div class="alert-sign">!</div>
                        }
                    </td>

                    if ((startDayOfWeek + day - 1) % 7 == 0)
                    {
                        @:</tr><tr>
                    }
                }
            </tr>
        </tbody>
    </table>

    <div id="lessonDetails" class="lesson-details" style="margin-left: 20px; display:none;">
        <h3>Информация о занятии</h3>
        <p><strong>Дата:</strong> <span id="lessonDate"></span></p>
        <p><strong>Предмет:</strong> <span id="lessonSubject"></span></p>
        <p><strong>Преподаватель:</strong> <span id="lessonTeacher"></span></p>
        <p><strong>Заметки:</strong> <span id="lessonNotes"></span></p>
    </div>
</div>

<script>
    const lessons = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Lessons));

    document.querySelectorAll('.calendar-day').forEach(cell => {
        cell.addEventListener('click', () => {
            const date = cell.getAttribute('data-date');
            const lesson = lessons.find(l => l.Date.startsWith(date));

            if (lesson) {
                document.getElementById('lessonDetails').style.display = 'block';
                document.getElementById('lessonDate').innerText = lesson.Date.split('T')[0];
                document.getElementById('lessonSubject').innerText = lesson.Subject;
                document.getElementById('lessonTeacher').innerText = lesson.Teacher;
                document.getElementById('lessonNotes').innerText = lesson.Notes;
            } else {
                document.getElementById('lessonDetails').style.display = 'none';
            }
        });
    });
</script>

<style>
    body{margin-top: 40px;}
    .calendar {
        width: 60%;
        border-collapse: collapse;
    }

    .calendar th, .calendar td {
        width: 14%;
        text-align: center;
        height: 40px;
        position: relative;
        border: 1px solid #ddd;
        cursor: pointer;
    }

    .lesson-day {
        background-color: #c7f7c3;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        line-height: 30px;
        text-align: center;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .alert-sign {
        color: red;
        font-weight: bold;
        position: absolute;
        top: 2px;
        right: 12px;
        font-size: 14px;
    }

    .lesson-details {
        border: 1px solid #ddd;
        padding: 10px;
        background-color: #f9f9f9;
        width: 250px;
    }
</style> *@